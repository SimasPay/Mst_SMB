<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Licensed to the 
	Apache Software Foundation (ASF) under one or more contributor license agreements. 
	See the NOTICE file distributed with this work for additional information 
	regarding copyright ownership. The ASF licenses this file to You under the 
	Apache License, Version 2.0 (the "License"); you may not use this file except 
	in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. --><!-- Configures the 
	Camel Context -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:broker="http://activemq.apache.org/schema/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:osgi="http://www.springframework.org/schema/osgi"
	xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
						http://www.springframework.org/schema/osgi   
						http://www.springframework.org/schema/osgi/spring-osgi.xsd 
						http://www.springframework.org/schema/osgi-compendium 
						http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd 
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://activemq.apache.org/schema/core
						http://activemq.apache.org/schema/core/activemq-core-5.5.0.xsd">

	<osgi:reference id="sessionFactory" interface="org.hibernate.SessionFactory"/>
	<osgi:reference id="subscriberDAO" interface="com.mfino.dao.SubscriberDAO"/>
    <osgi:reference id="subscriberMDNDAO" interface="com.mfino.dao.SubscriberMDNDAO"/>
    <osgi:reference id="activitiesLogDAO" interface="com.mfino.dao.ActivitiesLogDAO"/>
    <osgi:reference id="pocketDAO" interface="com.mfino.dao.PocketDAO"/>
    <osgi:reference id="notificationDAO" interface="com.mfino.dao.NotificationDAO"/>
    <osgi:reference id="mfinoServiceProviderDAO" interface="com.mfino.dao.MfinoServiceProviderDAO"/>
    <osgi:reference id="pendingCommodityTransferDAO" interface="com.mfino.dao.PendingCommodityTransferDAO"/>
    <osgi:reference id="hibernateSessionHolder" interface="com.mfino.hibernate.session.HibernateSessionHolder"/>
    <osgi:reference id="transactionLogDao" interface="com.mfino.dao.TransactionsLogDAO"/>
    <osgi:reference id="systemParameterDao" interface="com.mfino.dao.SystemParametersDao"/>
    <osgi:reference id="commodityTransferDao" interface="com.mfino.dao.CommodityTransferDAO"/>
    <osgi:reference id="ledgerDao" interface="com.mfino.dao.LedgerDAO"/>
    <osgi:reference id="pendingTransactionsEntryDAO" interface="com.mfino.dao.PendingTransactionsEntryDAO"/>
    <osgi:reference id="pendingTransactionsFileDao" interface="com.mfino.dao.PendingTransactionsFileDAO"/>
    <osgi:reference id="txManager" interface="org.springframework.orm.hibernate3.HibernateTransactionManager" />

	<osgi:reference id="smsServiceImpl" bean-name="SMSServiceImpl" interface="com.mfino.service.SMSService"/>

    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:mfino_conf/mce.properties</value>
			</list>
		</property>
	</bean>
     
	
	<bean id="coreDataWrapper" class="com.mfino.mce.core.CoreDataWrapper">
		<!--  <property name="subscriberDAO" ref="subscriberDAO"/>-->
		<property name="subscriberMDNDAO" ref="subscriberMDNDAO"/>
		<property name="transactionLogDao" ref="transactionLogDao"/>
		<property name="activitiesLogDAO" ref="activitiesLogDAO"/>
		<property name="pocketDAO" ref="pocketDAO"/>
		<property name="notificationDAO" ref="notificationDAO"/>
		<property name="mfinoServiceProviderDAO" ref="mfinoServiceProviderDAO"/>
		<property name="pendingCommodityTransferDAO" ref="pendingCommodityTransferDAO"/>
		<property name="systemParameterDao" ref="systemParameterDao"/>
		<property name="commodityTransferDao" ref="commodityTransferDao"/>
		<property name="ledgerDao" ref="ledgerDao"/>
		<property name="pendingTransactionsEntryDAO" ref="pendingTransactionsEntryDAO"/>
		<property name="pendingTransactionsFileDao" ref="pendingTransactionsFileDao"/>
	</bean>
	
	<bean id="commodityTransferServiceImpl" class="com.mfino.mce.backend.impl.CommodityTransferServiceImpl">
		<property name="coreDataWrapper" ref="coreDataWrapper"/>
		<property name="timeout" value="${pct.timeout}"></property>
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="ledgerServiceImpl" class="com.mfino.mce.backend.impl.LedgerServiceImpl">
		<property name="coreDataWrapper" ref="coreDataWrapper"/>
	</bean>
	
	<bean id="validationServiceImpl" class="com.mfino.mce.backend.impl.ValidationServiceImpl">
		<property name="coreDataWrapper" ref="coreDataWrapper"/>
		<property name="ledgerService" ref="ledgerServiceImpl" />
	</bean>
	
	<bean id="bankServiceDefaultImpl" class="com.mfino.mce.backend.impl.BankServiceDefaultImpl">
		<property name="coreDataWrapper" ref="coreDataWrapper"/>
		<property name="validationService" ref="validationServiceImpl" />
		<property name="commodityTransferService" ref="commodityTransferServiceImpl" />
		<property name="ledgerService" ref="ledgerServiceImpl" />
	</bean>
	
	<!-- <bean id="timeZone" class="java.util.TimeZone" factory-method="getTimeZone">
        <constructor-arg value="GMT" />
    </bean>  -->
    <bean id="timeZone" class="com.mfino.util.ConfigurationUtil" factory-method="getTimeZone">
    	<constructor-arg><ref bean="sessionFactory"/></constructor-arg>
		<constructor-arg><ref bean="hibernateSessionHolder"/></constructor-arg>
    </bean>
    
    <bean id="pendingClearanceServiceImpl" class="com.mfino.mce.backend.impl.PendingClearanceServiceDefaultImpl">
		<property name="bankService" ref="bankServiceDefaultImpl" />
		<property name="coreDataWrapper" ref="coreDataWrapper"/>
	</bean>
    
	<bean id="pctClearanceImpl"	class="com.mfino.mce.backend.impl.PendingCommodityTransferClearanceImpl">
		<property name="bankService" ref="bankServiceDefaultImpl" />
		<property name="coreDataWrapper" ref="coreDataWrapper" />
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="commodityTransferService" ref="commodityTransferServiceImpl" />
		<property name="smsService" ref="smsServiceImpl"/>
	</bean>

	<bean id="transferPCT"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="pctClearanceImpl" />
		<property name="targetMethod" value="movePendingToComplete" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="transferPCTTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="transferPCT" />
		<property name="timeZone" ref="timeZone" />
		<!-- runs every day 1 AM -->
		<property name="cronExpression" value="0 0/5 * * * ?" />
	</bean>
	
	<bean id="bulkResolveService"
		class="com.mfino.mce.backend.impl.BulkPendingResolveServiceImpl">
		<property name="pendingClearanceService" ref="pendingClearanceServiceImpl" />
		<property name="coreDataWrapper" ref="coreDataWrapper" />
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="bulkResolvePCT"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="bulkResolveService" />
		<property name="targetMethod" value="resolve" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="bulkResolvePCTTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="bulkResolvePCT" />
		 <property name="startDelay" value="10000" />
        <property name="repeatInterval" value="1800000" />
	</bean>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
			 <ref bean="transferPCTTrigger"/>
			 <ref bean="bulkResolvePCTTrigger"/>
			</list>
		</property>
	</bean>

	<tx:annotation-driven transaction-manager="txManager" />
</beans>