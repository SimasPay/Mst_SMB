package com.mfino.domain;

// Generated Sep 27, 2016 5:23:21 PM by Hibernate Tools 3.4.0.CR1

import java.io.Serializable;
import java.math.BigDecimal;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;
import com.mfino.hibernate.Timestamp;

/**
 * PtcGroupMapping generated by hbm2java
 */
@Entity
@Table(name = "PTC_GROUP_MAPPING", uniqueConstraints = @UniqueConstraint(columnNames = {
		"GROUPID", "PTCID" }))
public class PtcGroupMapping extends Base implements java.io.Serializable {

	
	private PocketTemplateConfig pocketTemplateConfig;
	private Groups groups;
	

	public PtcGroupMapping() {
	}

	public PtcGroupMapping(BigDecimal id, Timestamp lastupdatetime,
			String updatedby, Timestamp createtime, String createdby) {
		this.id = id;
		this.lastupdatetime = lastupdatetime;
		this.updatedby = updatedby;
		this.createtime = createtime;
		this.createdby = createdby;
	}

	public PtcGroupMapping(BigDecimal id,
			PocketTemplateConfig pocketTemplateConfig, Groups groups,
			Timestamp lastupdatetime, String updatedby,
			Timestamp createtime, String createdby) {
		this.id = id;
		this.pocketTemplateConfig = pocketTemplateConfig;
		this.groups = groups;
		this.lastupdatetime = lastupdatetime;
		this.updatedby = updatedby;
		this.createtime = createtime;
		this.createdby = createdby;
	}

	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PTCID")
	public PocketTemplateConfig getPocketTemplateConfig() {
		return this.pocketTemplateConfig;
	}

	public void setPocketTemplateConfig(
			PocketTemplateConfig pocketTemplateConfig) {
		this.pocketTemplateConfig = pocketTemplateConfig;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "GROUPID")
	public Groups getGroups() {
		return this.groups;
	}

	public void setGroups(Groups groups) {
		this.groups = groups;
	}

	

}
