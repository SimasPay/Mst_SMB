package com.mfino.domain;
// Generated Jul 27, 2009 3:18:44 PM by Hibernate Tools 3.2.1.GA

import java.lang.reflect.Method;

import org.hibernate.metadata.ClassMetadata;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mfino.fix.CmFinoFIX;
import com.mfino.service.CoreServiceFactory;
import com.mfino.service.HibernateService;

/**
 * CommodityTransfer generated by hbm2java
 */
public class CommodityTransfer extends CmFinoFIX.CRCommodityTransfer {

	private Logger log = LoggerFactory.getLogger(getClass());
	private Long sctlId;
	private String generatedTxnDescription;
	
	
	public String getGeneratedTxnDescription() {
		return generatedTxnDescription;
	}

	public void setGeneratedTxnDescription(String generatedTxnDescription) {
		this.generatedTxnDescription = generatedTxnDescription;
	}

	public Long getSctlId() {
		return sctlId;
	}

	public void setSctlId(Long sctlId) {
		this.sctlId = sctlId;
	}

	@SuppressWarnings("unchecked")
	public void copy(PendingCommodityTransfer pendingCommodityTransfer) {
		copy(pendingCommodityTransfer, null);
	}
	
    @SuppressWarnings("unchecked")
    public void copyBackup(PendingCommodityTransfer pendingCommodityTransfer, ClassMetadata classMetadata) {
        try {
            Class ctcl = Class.forName("com.mfino.domain.CommodityTransfer");
            Class pctcl = Class.forName("com.mfino.domain.PendingCommodityTransfer");
            
            if(classMetadata == null){
            	HibernateService hibernateService = CoreServiceFactory.getInstance().getHibernateService();
            	classMetadata = hibernateService.getSession().getSessionFactory().getClassMetadata(CommodityTransfer.class);
            }
            
            String[] propertyNames = classMetadata.getPropertyNames();
            String IdPropertyNames = classMetadata.getIdentifierPropertyName();
            Class c = null;
            Method method = pctcl.getMethod("get" + IdPropertyNames, c);
            Method method1 = ctcl.getMethod("set" + IdPropertyNames, method.getReturnType());
            method1.invoke(this, method.invoke(pendingCommodityTransfer, new Object[0]));
            for (int i = 0; i < propertyNames.length; i++) {
                method = pctcl.getMethod("get" + propertyNames[i], c);
                //System.out.println(propertyNames[i] + "  " + method.invoke(pendingCommodityTransfer, new Object[0]));
                method1 = ctcl.getMethod("set" + propertyNames[i], method.getReturnType());
                method1.invoke(this, method.invoke(pendingCommodityTransfer, new Object[0]));
//                        Method method2 = ctcl.getMethod("get" + propertyNames[i],null);
//                        System.out.println(propertyNames[i] + "  " + method2.invoke(this, new Object[0]));
            }

        } catch (Exception exp) {
        	log.error("Commodity Transfer Copy backup failed: ", exp);
        }

    }
    
    @SuppressWarnings("unchecked")
    public void copy(PendingCommodityTransfer pendingCommodityTransfer, ClassMetadata classMetadata) {
        try {
            Class ctcl = Class.forName("com.mfino.domain.CommodityTransfer");
            Class pctcl = Class.forName("com.mfino.domain.PendingCommodityTransfer");
            
            if(classMetadata == null){
            	HibernateService hibernateService = CoreServiceFactory.getInstance().getHibernateService();
            	classMetadata = hibernateService.getSession().getSessionFactory().getClassMetadata(CommodityTransfer.class);
            }
            
            String[] propertyNames = classMetadata.getPropertyNames();
//            String IdPropertyNames = classMetadata.getIdentifierPropertyName();
            Class c = null;
            Method method;
            Method method1;
//            Method method = pctcl.getMethod("get" + IdPropertyNames, c);
//            Method method1 = ctcl.getMethod("set" + IdPropertyNames, method.getReturnType());
//            method1.invoke(this, method.invoke(pendingCommodityTransfer, new Object[0]));
            for (int i = 0; i < propertyNames.length; i++) {
            	try{
            		method = pctcl.getMethod("get" + propertyNames[i]);
            	}
            	catch(Exception exp){
            		log.error("caught exception ", exp);
            		continue;
            	}
                //System.out.println(propertyNames[i] + "  " + method.invoke(pendingCommodityTransfer, new Object[0]));
                method1 = ctcl.getMethod("set" + propertyNames[i], method.getReturnType());
                method1.invoke(this, method.invoke(pendingCommodityTransfer, new Object[0]));
//                        Method method2 = ctcl.getMethod("get" + propertyNames[i],null);
//                        System.out.println(propertyNames[i] + "  " + method2.invoke(this, new Object[0]));
            }

        } catch (Exception exp) {
        	log.error("Commodity Transfer Copy failed: ", exp);
        }

    }
}


