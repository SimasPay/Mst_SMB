package com.mfino.domain;

// Generated Sep 27, 2016 5:23:21 PM by Hibernate Tools 3.4.0.CR1

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Version;

import com.mfino.hibernate.Timestamp;

/**
 * FundDefinition generated by hbm2java
 */
@Entity
@Table(name = "FUND_DEFINITION")
public class FundDefinition extends Base implements java.io.Serializable {

	
	public static final String FieldName_PurposeID = "purposeid";
	private FundEvents fundEventsByOnfailedattemptsexceeded;
	private FundEvents fundEventsByOnfundallocationtimeexpiry;
	private FundEvents fundEventsByGenerationofotponfailure;
	private ExpirationType expirationType;
	private BigDecimal mspid;
	private BigDecimal purposeid;
	private Long faclength;
	private String facprefix;
	private Long maxfailattemptsallowed;
	private Short ismultiplewithdrawalallowed;
	private Set<UnregisteredTxnInfo> unregisteredTxnInfos = new HashSet<UnregisteredTxnInfo>(
			0);

	public FundDefinition() {
	}

	public FundDefinition(BigDecimal id, Timestamp lastupdatetime,
			String updatedby, Timestamp createtime, String createdby,
			BigDecimal mspid) {
		this.id = id;
		this.lastupdatetime = lastupdatetime;
		this.updatedby = updatedby;
		this.createtime = createtime;
		this.createdby = createdby;
		this.mspid = mspid;
	}

	public FundDefinition(BigDecimal id,
			FundEvents fundEventsByOnfailedattemptsexceeded,
			FundEvents fundEventsByOnfundallocationtimeexpiry,
			FundEvents fundEventsByGenerationofotponfailure,
			ExpirationType expirationType, Timestamp lastupdatetime,
			String updatedby, Timestamp createtime, String createdby,
			BigDecimal mspid, BigDecimal purposeid, Long faclength,
			String facprefix, Long maxfailattemptsallowed,
			Short ismultiplewithdrawalallowed,
			Set<UnregisteredTxnInfo> unregisteredTxnInfos) {
		this.id = id;
		this.fundEventsByOnfailedattemptsexceeded = fundEventsByOnfailedattemptsexceeded;
		this.fundEventsByOnfundallocationtimeexpiry = fundEventsByOnfundallocationtimeexpiry;
		this.fundEventsByGenerationofotponfailure = fundEventsByGenerationofotponfailure;
		this.expirationType = expirationType;
		this.lastupdatetime = lastupdatetime;
		this.updatedby = updatedby;
		this.createtime = createtime;
		this.createdby = createdby;
		this.mspid = mspid;
		this.purposeid = purposeid;
		this.faclength = faclength;
		this.facprefix = facprefix;
		this.maxfailattemptsallowed = maxfailattemptsallowed;
		this.ismultiplewithdrawalallowed = ismultiplewithdrawalallowed;
		this.unregisteredTxnInfos = unregisteredTxnInfos;
	}

	

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ONFAILEDATTEMPTSEXCEEDED")
	public FundEvents getFundEventsByOnfailedattemptsexceeded() {
		return this.fundEventsByOnfailedattemptsexceeded;
	}

	public void setFundEventsByOnfailedattemptsexceeded(
			FundEvents fundEventsByOnfailedattemptsexceeded) {
		this.fundEventsByOnfailedattemptsexceeded = fundEventsByOnfailedattemptsexceeded;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ONFUNDALLOCATIONTIMEEXPIRY")
	public FundEvents getFundEventsByOnfundallocationtimeexpiry() {
		return this.fundEventsByOnfundallocationtimeexpiry;
	}

	public void setFundEventsByOnfundallocationtimeexpiry(
			FundEvents fundEventsByOnfundallocationtimeexpiry) {
		this.fundEventsByOnfundallocationtimeexpiry = fundEventsByOnfundallocationtimeexpiry;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "GENERATIONOFOTPONFAILURE")
	public FundEvents getFundEventsByGenerationofotponfailure() {
		return this.fundEventsByGenerationofotponfailure;
	}

	public void setFundEventsByGenerationofotponfailure(
			FundEvents fundEventsByGenerationofotponfailure) {
		this.fundEventsByGenerationofotponfailure = fundEventsByGenerationofotponfailure;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EXPIRYID")
	public ExpirationType getExpirationType() {
		return this.expirationType;
	}

	public void setExpirationType(ExpirationType expirationType) {
		this.expirationType = expirationType;
	}

	

	@Column(name = "MSPID", nullable = false, scale = 0)
	public BigDecimal getMspid() {
		return this.mspid;
	}

	public void setMspid(BigDecimal mspid) {
		this.mspid = mspid;
	}

	@Column(name = "PURPOSEID", scale = 0)
	public BigDecimal getPurposeid() {
		return this.purposeid;
	}

	public void setPurposeid(BigDecimal purposeid) {
		this.purposeid = purposeid;
	}

	@Column(name = "FACLENGTH", precision = 10, scale = 0)
	public Long getFaclength() {
		return this.faclength;
	}

	public void setFaclength(Long faclength) {
		this.faclength = faclength;
	}

	@Column(name = "FACPREFIX")
	public String getFacprefix() {
		return this.facprefix;
	}

	public void setFacprefix(String facprefix) {
		this.facprefix = facprefix;
	}

	@Column(name = "MAXFAILATTEMPTSALLOWED", precision = 10, scale = 0)
	public Long getMaxfailattemptsallowed() {
		return this.maxfailattemptsallowed;
	}

	public void setMaxfailattemptsallowed(Long maxfailattemptsallowed) {
		this.maxfailattemptsallowed = maxfailattemptsallowed;
	}

	@Column(name = "ISMULTIPLEWITHDRAWALALLOWED", precision = 3, scale = 0)
	public Short getIsmultiplewithdrawalallowed() {
		return this.ismultiplewithdrawalallowed;
	}

	public void setIsmultiplewithdrawalallowed(Short ismultiplewithdrawalallowed) {
		this.ismultiplewithdrawalallowed = ismultiplewithdrawalallowed;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fundDefinition")
	public Set<UnregisteredTxnInfo> getUnregisteredTxnInfos() {
		return this.unregisteredTxnInfos;
	}

	public void setUnregisteredTxnInfos(
			Set<UnregisteredTxnInfo> unregisteredTxnInfos) {
		this.unregisteredTxnInfos = unregisteredTxnInfos;
	}

}
